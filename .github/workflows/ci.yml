name: Android CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle (no tests)
        run: ./gradlew assemble

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: app/build/outputs/apk/

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          build-tools: 30.0.3

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Unit Tests and Capture Results
        id: run_tests
        run: |
          ./gradlew test | tee test-results.txt
          TEST_RESULTS=$(grep -A 7 "Test Summary" test-results.txt | tail -n +2 | sed 's/\x1B\[[0-9;]*[JKmsu]//g' | tr -d '[:space:]')
          echo "$TEST_RESULTS" > test-summary.txt

      # - name: Format Test Results for Two-Row Markdown Table with Emojis
      #   run: |
      #     echo "### Test Results" > formatted-summary.txt
      #     echo "" >> formatted-summary.txt
      #     echo "| Total Tests | Passed | Failed | Skipped | Result |" >> formatted-summary.txt
      #     echo "|-------------|--------|--------|---------|--------|" >> formatted-summary.txt
  
      #     echo "Raw Test Summary Content:"
      #     cat test-summary.txt
  
      #     # Extracting values using awk
      #     TOTAL=$(echo "$TEST_RESULTS" | awk -F'[: ]+' '/TotalTests/ {print $2}')
      #     PASSED=$(echo "$TEST_RESULTS" | awk -F'[: ]+' '/Passed/ {print $2}')
      #     FAILED=$(echo "$TEST_RESULTS" | awk -F'[: ]+' '/Failed/ {print $2}')
      #     SKIPPED=$(echo "$TEST_RESULTS" | awk -F'[: ]+' '/Skipped/ {print $2}')
      #     RESULT=$(echo "$TEST_RESULTS" | awk -F'[: ]+' '/Result/ {print $2}')
  
      #     # Detailed debugging
      #     echo "Debug: Extracted Values:"
      #     echo "  TOTAL: '$TOTAL'"
      #     echo "  PASSED: '$PASSED'"
      #     echo "  FAILED: '$FAILED'"
      #     echo "  SKIPPED: '$SKIPPED'"
      #     echo "  RESULT (Raw): '$RESULT'"
  
      #     if [[ "$RESULT" == "SUCCESS" ]]; then
      #       EMOJI="✅"
      #     elif [[ "$RESULT" == "FAILURE" ]]; then
      #       EMOJI="❌"
      #     else
      #       EMOJI="⚠️"
      #     fi
  
      #     echo "Debug: Final RESULT after processing: '$RESULT $EMOJI'"
  
      #     echo "| $TOTAL | $PASSED | $FAILED | $SKIPPED | $RESULT $EMOJI |" >> formatted-summary.txt
  
      #     # Show the final output for debugging
      #     echo "Final formatted-summary.txt content:"
      #     cat formatted-summary.txt
        
      # - name: Comment on PR
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const testResults = fs.readFileSync('formatted-summary.txt', 'utf8');
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: testResults
      #       });
